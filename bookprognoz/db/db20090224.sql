/******************************************************************************/
/***          Generated by IBExpert 2007.09.02 05.03.2009 22:28:43          ***/
/******************************************************************************/

SET SQL DIALECT 3;

SET NAMES NONE;

CREATE DATABASE '127.0.0.1:bookprognoz'
USER 'SYSDBA' PASSWORD '1'
PAGE_SIZE 16384
DEFAULT CHARACTER SET NONE;



/******************************************************************************/
/***                               Generators                               ***/
/******************************************************************************/

CREATE GENERATOR GEN_BETS_ID;
SET GENERATOR GEN_BETS_ID TO 62;

CREATE GENERATOR GEN_EDITION_ID;
SET GENERATOR GEN_EDITION_ID TO 2;

CREATE GENERATOR GEN_EVENTS_ID;
SET GENERATOR GEN_EVENTS_ID TO 22;

CREATE GENERATOR GEN_ISSUES_ID;
SET GENERATOR GEN_ISSUES_ID TO 3;

CREATE GENERATOR GEN_PUNCT_ID;
SET GENERATOR GEN_PUNCT_ID TO 1;



SET TERM ^ ; 



/******************************************************************************/
/***                           Stored Procedures                            ***/
/******************************************************************************/

CREATE PROCEDURE ADD_EVENT_TO_BET (
    BETID BIGINT,
    EVENTID BIGINT,
    ISSUEID SMALLINT)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ADD_EVENT_TO_EDITION (
    HOME VARCHAR(512),
    AWAY VARCHAR(512),
    NUMBER SMALLINT,
    EDITION INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ADD_PUNCT (
    TITLE VARCHAR(128))
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE CREATE_EDITION (
    START_DATE TIMESTAMP,
    NUMBER INTEGER,
    END_DATE TIMESTAMP)
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE CREATE_TICKET (
    NUMBER VARCHAR(10),
    PUNCT SMALLINT)
RETURNS (
    BETID BIGINT)
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE GET_EDITIONS_LIST
RETURNS (
    ID INTEGER,
    NUMBER INTEGER,
    END_DATE TIMESTAMP,
    START_DATE TIMESTAMP,
    STATE SMALLINT,
    TICKETS INTEGER)
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE GET_EVENTS_LIST
RETURNS (
    NUMBER SMALLINT,
    EVENTID BIGINT,
    HOME VARCHAR(512),
    AWAY VARCHAR(512))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE GET_ISSUE_LIST
RETURNS (
    ID INTEGER,
    TITLE VARCHAR(128))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE GET_PUNCTS_LIST
RETURNS (
    ID INTEGER,
    TITLE VARCHAR(128))
AS
BEGIN
  SUSPEND;
END^



SET TERM ; ^


/******************************************************************************/
/***                                 Tables                                 ***/
/******************************************************************************/



CREATE TABLE BETEVENTS (
    BET_ID    BIGINT NOT NULL,
    EVENT_ID  BIGINT NOT NULL,
    ISSUE_ID  INTEGER NOT NULL
);


CREATE TABLE BETS (
    ID       BIGINT NOT NULL,
    NUMBER   VARCHAR(10) NOT NULL,
    BETTIME  TIMESTAMP,
    SUMBET   DECIMAL(15,2),
    PUNCT    INTEGER NOT NULL
);


CREATE TABLE EDITION (
    NUMBER     INTEGER NOT NULL,
    ENDDATE    TIMESTAMP NOT NULL,
    STATE      INTEGER NOT NULL,
    ID         INTEGER NOT NULL,
    STARTDATE  TIMESTAMP NOT NULL
);


CREATE TABLE EVENTS (
    EDITION   INTEGER NOT NULL,
    ID        BIGINT NOT NULL,
    HOMETEAM  VARCHAR(512) NOT NULL,
    AWAYTEAM  VARCHAR(512) NOT NULL,
    RESULT    INTEGER,
    NUMBER    SMALLINT NOT NULL
);


CREATE TABLE ISSUES (
    ID     INTEGER NOT NULL,
    TITLE  VARCHAR(128) NOT NULL
);


CREATE TABLE PUNCT (
    ID     INTEGER NOT NULL,
    TITLE  VARCHAR(128)
);




/******************************************************************************/
/***                           Unique Constraints                           ***/
/******************************************************************************/

ALTER TABLE BETS ADD CONSTRAINT UNQ_BETS_NUMBER UNIQUE (NUMBER);
ALTER TABLE EDITION ADD CONSTRAINT UNQ_EDITION_NUMBER UNIQUE (NUMBER);
ALTER TABLE EVENTS ADD CONSTRAINT UNQ_EVENTS_NUMBER UNIQUE (NUMBER, EDITION);


/******************************************************************************/
/***                              Primary Keys                              ***/
/******************************************************************************/

ALTER TABLE BETEVENTS ADD CONSTRAINT PK_BETEVENTS PRIMARY KEY (BET_ID, EVENT_ID);
ALTER TABLE BETS ADD CONSTRAINT PK_BETS PRIMARY KEY (ID);
ALTER TABLE EDITION ADD PRIMARY KEY (ID);
ALTER TABLE EVENTS ADD CONSTRAINT PK_EVENTS PRIMARY KEY (ID);
ALTER TABLE ISSUES ADD CONSTRAINT PK_ISSUES PRIMARY KEY (ID);
ALTER TABLE PUNCT ADD CONSTRAINT PK_PUNCT PRIMARY KEY (ID);


/******************************************************************************/
/***                              Foreign Keys                              ***/
/******************************************************************************/

ALTER TABLE BETEVENTS ADD CONSTRAINT FK_BETEVENTS_BET FOREIGN KEY (BET_ID) REFERENCES BETS (ID);
ALTER TABLE BETEVENTS ADD CONSTRAINT FK_BETEVENTS_EVENTS FOREIGN KEY (EVENT_ID) REFERENCES EVENTS (ID);
ALTER TABLE BETEVENTS ADD CONSTRAINT FK_BETEVENTS_ISSUE FOREIGN KEY (ISSUE_ID) REFERENCES ISSUES (ID);
ALTER TABLE BETS ADD CONSTRAINT FK_BETS_PUNCT FOREIGN KEY (PUNCT) REFERENCES PUNCT (ID);
ALTER TABLE EVENTS ADD CONSTRAINT FK_EVENTS_EDITION FOREIGN KEY (EDITION) REFERENCES EDITION (ID);
ALTER TABLE EVENTS ADD CONSTRAINT FK_EVENTS_RESULT FOREIGN KEY (RESULT) REFERENCES ISSUES (ID);


/******************************************************************************/
/***                                Triggers                                ***/
/******************************************************************************/


SET TERM ^ ;


/******************************************************************************/
/***                          Triggers for tables                           ***/
/******************************************************************************/



/* Trigger: BETS_BI */
CREATE TRIGGER BETS_BI FOR BETS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_BETS_ID,1);
END
^


/* Trigger: EDITION_BI */
CREATE TRIGGER EDITION_BI FOR EDITION
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_EDITION_ID,1);
END
^


/* Trigger: EVENTS_BI */
CREATE TRIGGER EVENTS_BI FOR EVENTS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_EVENTS_ID,1);
END
^


/* Trigger: ISSUES_BI */
CREATE TRIGGER ISSUES_BI FOR ISSUES
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_ISSUES_ID,1);
END
^


/* Trigger: PUNCT_BI */
CREATE TRIGGER PUNCT_BI FOR PUNCT
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_PUNCT_ID,1);
END
^


SET TERM ; ^



/******************************************************************************/
/***                           Stored Procedures                            ***/
/******************************************************************************/


SET TERM ^ ;

ALTER PROCEDURE ADD_EVENT_TO_BET (
    BETID BIGINT,
    EVENTID BIGINT,
    ISSUEID SMALLINT)
AS
begin
    insert into betevents (bet_id, event_id, issue_id)
        values (:betid, :eventid, :issueid);
end
^

ALTER PROCEDURE ADD_EVENT_TO_EDITION (
    HOME VARCHAR(512),
    AWAY VARCHAR(512),
    NUMBER SMALLINT,
    EDITION INTEGER)
AS
begin
    insert into events (number, edition, hometeam, awayteam)
        values (:number, :edition, :home, :away);
end
^

ALTER PROCEDURE ADD_PUNCT (
    TITLE VARCHAR(128))
RETURNS (
    ID INTEGER)
AS
begin
  insert into punct (title) values (:title);
    
    for select id from punct where title = :title
    into :id
    do begin
        suspend;
    end

end
^

ALTER PROCEDURE CREATE_EDITION (
    START_DATE TIMESTAMP,
    NUMBER INTEGER,
    END_DATE TIMESTAMP)
RETURNS (
    ID INTEGER)
AS
begin
    insert into edition (number , enddate, startDate)
        values (:number, :end_Date, :start_date);

    select id from edition where number = :number
        into :id;
    suspend;
end
^

ALTER PROCEDURE CREATE_TICKET (
    NUMBER VARCHAR(10),
    PUNCT SMALLINT)
RETURNS (
    BETID BIGINT)
AS
begin
  insert into bets (number, bettime, sumbet, punct)
      values (:number, 'now', 20, :punct);

  select id from bets where bets.number = :number and bets.punct = :punct
      into :betid;

  suspend;
end
^

ALTER PROCEDURE GET_EDITIONS_LIST
RETURNS (
    ID INTEGER,
    NUMBER INTEGER,
    END_DATE TIMESTAMP,
    START_DATE TIMESTAMP,
    STATE SMALLINT,
    TICKETS INTEGER)
AS
begin

    for select edition.id, edition.number, edition.enddate,edition.state
        from edition
        into :id, :number, :end_date, :state
        do begin
            suspend;
        end
end
^

ALTER PROCEDURE GET_EVENTS_LIST
RETURNS (
    NUMBER SMALLINT,
    EVENTID BIGINT,
    HOME VARCHAR(512),
    AWAY VARCHAR(512))
AS
begin

  for select events.number, events.id,events.hometeam, events.awayteam
        from edition
            inner join events on events.edition = edition.id
                where edition.enddate >= 'now' and edition.state = 0
            into :number,:eventid, :home, :away
         do begin
            suspend;
         end

end
^

ALTER PROCEDURE GET_ISSUE_LIST
RETURNS (
    ID INTEGER,
    TITLE VARCHAR(128))
AS
begin
  for select issues.id, issues.title
    from issues
    into :id, :title
    do begin
        suspend;
    end
end
^

ALTER PROCEDURE GET_PUNCTS_LIST
RETURNS (
    ID INTEGER,
    TITLE VARCHAR(128))
AS
begin
  for select id, title from punct
    into :id, :title
    do begin
        suspend;
    end
 end
^


SET TERM ; ^


/* Fields descriptions */

DESCRIBE FIELD STATE TABLE EDITION
'//0 - active
1 - closed';
